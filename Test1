class A:
    empCount = 0
    
    @staticmethod
    def displayCount():
        print ('Total Employee -', A.empCount, '\n')
    
    def __new__(cls, *args):
        A.empCount += 1
        #return object.__new__(cls)
        return super(A, cls).__new__(cls)
    
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
        #A.empCount += 1
        
    def __del__(self):
        A.empCount -= 1
        
    def __setattr__(self, key, value):
        if (key == 'salary' or  key == 'bonus') and value < 0:
            value = 0
            #print(f"__setattr__ is called for {key!r}: {value!r}")
        super().__setattr__(key, value)
        
    def __str__(self):
        return f"Employee: {self.name}, Salary: ${self.salary:.2f}"


class B(A):

    def __init__(self, name, salary, bonus = None):
        super().__init__(name, salary)
        if bonus is not None:
            self.bonus = bonus
        else:
            self.bonus = 0
    
    def __str__(self):
        return f"Employee: {self.name}, Salary: ${self.salary:.2f}, Bonus: ${self.bonus:.2f},"

class C(B):
    
    def __str__(self):
        return f"Employee: {self.name}"
        
def print_list(list):
    
    print('list :', '\n')
    
    for i in range(len(list)):
        #list[i].displayEmployee()
        print(list[i])
    
    A.displayCount()
    
    
List = list()

List.append(A('Zara', 2000))
List.append(B('Tom', 5000, 1000))
List.append(B('Ted', 4000))
List.append(C('Zed', 10000, 2000))

#obj1 = A('Zara', 2000)
#obj2= B('Tom', 5000, 1000)
#list = (obj1, obj2)

print_list(List)

List.pop(2) 

print_list(List)
